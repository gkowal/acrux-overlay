diff -uNr slurm-slurm-17-11-9-1/META slurm-slurm-17-11-9-2/META
--- slurm-slurm-17-11-9-1/META	2018-08-09 19:00:50.000000000 -0300
+++ slurm-slurm-17-11-9-2/META	2018-08-10 19:22:42.000000000 -0300
@@ -9,7 +9,7 @@
   Minor:	11
   Micro:	9
   Version:	17.11.9
-  Release:	1
+  Release:	2
 
 ##
 #  When making a new Major/Minor version update
diff -uNr slurm-slurm-17-11-9-1/NEWS slurm-slurm-17-11-9-2/NEWS
--- slurm-slurm-17-11-9-1/NEWS	2018-08-09 19:00:50.000000000 -0300
+++ slurm-slurm-17-11-9-2/NEWS	2018-08-10 19:22:42.000000000 -0300
@@ -1,6 +1,13 @@
 This file describes changes in recent versions of Slurm. It primarily
 documents those changes that are of interest to users and administrators.
 
+* Changes in Slurm 17.11.9-2
+===========================
+ -- Fix printing of node state "drain + reboot" (and other node state flags).
+ -- Fix invalid read (segfault) when sorting multi-partition jobs.
+ -- Move several new error() messages to debug() to keep them out of users'
+    srun output.
+
 * Changes in Slurm 17.11.9
 ==========================
  -- Fix segfault in slurmctld when a job's node bitmap is NULL during a
diff -uNr slurm-slurm-17-11-9-1/contribs/slurm.spec-legacy slurm-slurm-17-11-9-2/contribs/slurm.spec-legacy
--- slurm-slurm-17-11-9-1/contribs/slurm.spec-legacy	2018-08-09 19:00:50.000000000 -0300
+++ slurm-slurm-17-11-9-2/contribs/slurm.spec-legacy	2018-08-10 19:22:42.000000000 -0300
@@ -3,7 +3,7 @@
 
 Name:		slurm
 Version:	17.11.9
-%global rel	1
+%global rel	2
 Release:	%{rel}%{?dist}
 Summary:	Slurm Workload Manager
 
diff -uNr slurm-slurm-17-11-9-1/slurm.spec slurm-slurm-17-11-9-2/slurm.spec
--- slurm-slurm-17-11-9-1/slurm.spec	2018-08-09 19:00:50.000000000 -0300
+++ slurm-slurm-17-11-9-2/slurm.spec	2018-08-10 19:22:42.000000000 -0300
@@ -1,6 +1,6 @@
 Name:		slurm
 Version:	17.11.9
-%global rel	1
+%global rel	2
 Release:	%{rel}%{?dist}
 Summary:	Slurm Workload Manager
 
diff -uNr slurm-slurm-17-11-9-1/src/common/slurm_protocol_api.c slurm-slurm-17-11-9-2/src/common/slurm_protocol_api.c
--- slurm-slurm-17-11-9-1/src/common/slurm_protocol_api.c	2018-08-09 19:00:50.000000000 -0300
+++ slurm-slurm-17-11-9-2/src/common/slurm_protocol_api.c	2018-08-10 19:22:42.000000000 -0300
@@ -4561,7 +4561,7 @@
 	 * this function.
 	 */
 	if (shutdown(fd, SHUT_WR))
-		error("%s: shutdown call failed: %m", __func__);
+		debug("%s: shutdown call failed: %m", __func__);
 
 again:
 	pfd.fd = fd;
@@ -4570,15 +4570,15 @@
 	if (pollrc == -1) {
 		if (errno == EINTR)
 			goto again;
-		error("%s: poll error: %m", __func__);
+		debug("%s: poll error: %m", __func__);
 		(void) close(fd);
 		return SLURM_ERROR;
 	}
 
 	if (pollrc == 0) {
 		if (ioctl(fd, TIOCOUTQ, &value))
-			error("%s: TIOCOUTQ ioctl failed", __func__);
-		error("%s: poll timed out with %d outstanding: %m", __func__, value);
+			debug("%s: TIOCOUTQ ioctl failed", __func__);
+		debug("%s: poll timed out with %d outstanding: %m", __func__, value);
 		(void) close(fd);
 		return SLURM_ERROR;
 	}
@@ -4589,12 +4589,12 @@
 		int value = -1;
 
 		if (ioctl(fd, TIOCOUTQ, &value))
-			error("%s: TIOCOUTQ ioctl failed", __func__);
+			debug("%s: TIOCOUTQ ioctl failed", __func__);
 		if (getsockopt(fd, SOL_SOCKET, SO_ERROR, &err, &errlen))
-			error("%s: getsockopt error with %d outstanding: %m",
+			debug("%s: getsockopt error with %d outstanding: %m",
 			      __func__, value);
 		else
-			error("%s: poll error with %d outstanding: %s",
+			debug("%s: poll error with %d outstanding: %s",
 			      __func__, value, strerror(err));
 		(void) close(fd);
 		return SLURM_ERROR;
diff -uNr slurm-slurm-17-11-9-1/src/common/slurm_protocol_defs.c slurm-slurm-17-11-9-2/src/common/slurm_protocol_defs.c
--- slurm-slurm-17-11-9-1/src/common/slurm_protocol_defs.c	2018-08-09 19:00:50.000000000 -0300
+++ slurm-slurm-17-11-9-2/src/common/slurm_protocol_defs.c	2018-08-10 19:22:42.000000000 -0300
@@ -2715,6 +2715,14 @@
 		if (comp_flag
 		    || (base == NODE_STATE_ALLOCATED)
 		    || (base == NODE_STATE_MIXED)) {
+			if (maint_flag)
+				return "DRAINING$";
+			if (reboot_flag)
+				return "DRAINING@";
+			if (power_up_flag)
+				return "DRAINING#";
+			if (power_down_flag)
+				return "DRAINING~";
 			if (no_resp_flag)
 				return "DRAINING*";
 			return "DRAINING";
@@ -2723,6 +2731,14 @@
 				return "ERROR*";
 			return "ERROR";
 		} else {
+			if (maint_flag)
+				return "DRAINED$";
+			if (reboot_flag)
+				return "DRAINED@";
+			if (power_up_flag)
+				return "DRAINED#";
+			if (power_down_flag)
+				return "DRAINED~";
 			if (no_resp_flag)
 				return "DRAINED*";
 			return "DRAINED";
@@ -2890,6 +2906,14 @@
 		if (comp_flag
 		    || (inx == NODE_STATE_ALLOCATED)
 		    || (inx == NODE_STATE_MIXED)) {
+			if (maint_flag)
+				return "DRNG$";
+			if (reboot_flag)
+				return "DRNG@";
+			if (power_up_flag)
+				return "DRNG#";
+			if (power_down_flag)
+				return "DRNG~";
 			if (no_resp_flag)
 				return "DRNG*";
 			return "DRNG";
@@ -2898,6 +2922,14 @@
 				return "ERROR*";
 			return "ERROR";
 		} else {
+			if (maint_flag)
+				return "DRAIN$";
+			if (reboot_flag)
+				return "DRAIN@";
+			if (power_up_flag)
+				return "DRAIN#";
+			if (power_down_flag)
+				return "DRAIN~";
 			if (no_resp_flag)
 				return "DRAIN*";
 			return "DRAIN";
diff -uNr slurm-slurm-17-11-9-1/src/plugins/priority/multifactor/priority_multifactor.c slurm-slurm-17-11-9-2/src/plugins/priority/multifactor/priority_multifactor.c
--- slurm-slurm-17-11-9-1/src/plugins/priority/multifactor/priority_multifactor.c	2018-08-09 19:00:50.000000000 -0300
+++ slurm-slurm-17-11-9-2/src/plugins/priority/multifactor/priority_multifactor.c	2018-08-10 19:22:42.000000000 -0300
@@ -489,19 +489,6 @@
 	return priority_fs;
 }
 
-static int _sort_part_tier(void *x, void *y)
-{
-	struct part_record *parta = (struct part_record *) x;
-	struct part_record *partb = (struct part_record *) y;
-
-	if (parta->priority_tier > partb->priority_tier)
-		return -1;
-	if (parta->priority_tier < partb->priority_tier)
-		return 1;
-
-	return 0;
-}
-
 /* Returns the priority after applying the weight factors */
 static uint32_t _get_priority_internal(time_t start_time,
 				       struct job_record *job_ptr)
@@ -598,7 +585,7 @@
 		}
 
 		i = 0;
-		list_sort(job_ptr->part_ptr_list, _sort_part_tier);
+		list_sort(job_ptr->part_ptr_list, sort_part_tier);
 		part_iterator = list_iterator_create(job_ptr->part_ptr_list);
 		while ((part_ptr = (struct part_record *)
 			list_next(part_iterator))) {
diff -uNr slurm-slurm-17-11-9-1/src/slurmctld/job_mgr.c slurm-slurm-17-11-9-2/src/slurmctld/job_mgr.c
--- slurm-slurm-17-11-9-1/src/slurmctld/job_mgr.c	2018-08-09 19:00:50.000000000 -0300
+++ slurm-slurm-17-11-9-2/src/slurmctld/job_mgr.c	2018-08-10 19:22:42.000000000 -0300
@@ -4573,19 +4573,6 @@
 	}
 }
 
-static int _sort_part_tier(void *x, void *y)
-{
-	struct part_record *parta = *(struct part_record **) x;
-	struct part_record *partb = *(struct part_record **) y;
-
-	if (parta->priority_tier > partb->priority_tier)
-		return -1;
-	if (parta->priority_tier < partb->priority_tier)
-		return 1;
-
-	return 0;
-}
-
 /*
  * Wrapper for select_nodes() function that will test all valid partitions
  * for a new job
@@ -4606,7 +4593,7 @@
 	int best_rc = -1, part_limits_rc = WAIT_NO_REASON;
 
 	if (job_ptr->part_ptr_list) {
-		list_sort(job_ptr->part_ptr_list, _sort_part_tier);
+		list_sort(job_ptr->part_ptr_list, sort_part_tier);
 		iter = list_iterator_create(job_ptr->part_ptr_list);
 		while ((part_ptr = list_next(iter))) {
 			job_ptr->part_ptr = part_ptr;
diff -uNr slurm-slurm-17-11-9-1/src/slurmctld/partition_mgr.c slurm-slurm-17-11-9-2/src/slurmctld/partition_mgr.c
--- slurm-slurm-17-11-9-1/src/slurmctld/partition_mgr.c	2018-08-09 19:00:50.000000000 -0300
+++ slurm-slurm-17-11-9-2/src/slurmctld/partition_mgr.c	2018-08-10 19:22:42.000000000 -0300
@@ -156,6 +156,19 @@
 	list_for_each(part_list, _calc_part_tres, NULL);
 }
 
+extern int sort_part_tier(void *x, void *y)
+{
+	struct part_record *parta = *(struct part_record **) x;
+	struct part_record *partb = *(struct part_record **) y;
+
+	if (parta->priority_tier > partb->priority_tier)
+		return -1;
+	if (parta->priority_tier < partb->priority_tier)
+		return 1;
+
+	return 0;
+}
+
 /*
  * build_part_bitmap - update the total_cpus, total_nodes, and node_bitmap
  *	for the specified partition, also reset the partition pointers in
diff -uNr slurm-slurm-17-11-9-1/src/slurmctld/slurmctld.h slurm-slurm-17-11-9-2/src/slurmctld/slurmctld.h
--- slurm-slurm-17-11-9-1/src/slurmctld/slurmctld.h	2018-08-09 19:00:50.000000000 -0300
+++ slurm-slurm-17-11-9-2/src/slurmctld/slurmctld.h	2018-08-10 19:22:42.000000000 -0300
@@ -2531,6 +2531,11 @@
 extern void set_partition_tres();
 
 /*
+ * Sort partitions on Priority Tier.
+ */
+extern int sort_part_tier(void *x, void *y);
+
+/*
  * Update job's federated siblings strings.
  *
  * IN job_ptr - job_ptr to update
