diff --git a/cmds-scrub.c b/cmds-scrub.c
index f21d2d89..3422b65a 100644
--- a/cmds-scrub.c
+++ b/cmds-scrub.c
@@ -134,10 +134,16 @@ static void print_scrub_full(struct btrfs_scrub_progress *sp)
 		printf(" %s=%llu", desc, test);	\
 } while (0)
 
-static void print_scrub_summary(struct btrfs_scrub_progress *p)
+static void print_scrub_summary(struct btrfs_scrub_progress *p, struct scrub_stats *s, u64 total_bytes)
 {
 	u64 err_cnt;
 	u64 err_cnt2;
+	u64 bytes_scrubbed = p->data_bytes_scrubbed + p->tree_bytes_scrubbed;
+	u64 bytes_per_sec  = (s->duration > 0) ? (bytes_scrubbed / s->duration) : 0;
+	u64 seconds_left   = (bytes_per_sec > 0) ? (total_bytes - bytes_scrubbed) / bytes_per_sec : 0;
+	unsigned h_left = seconds_left / (60 * 60);
+	unsigned m_left = (seconds_left - 3600 * h_left) / 60;
+	unsigned s_left = seconds_left % 60;
 
 	err_cnt = p->read_errors +
 			p->csum_errors +
@@ -150,9 +156,16 @@ static void print_scrub_summary(struct btrfs_scrub_progress *p)
 		printf("*** WARNING: memory allocation failed while scrubbing. "
 		       "results may be inaccurate\n");
 
-	printf("\ttotal bytes scrubbed: %s with %llu errors\n",
-		pretty_size(p->data_bytes_scrubbed + p->tree_bytes_scrubbed),
-		max(err_cnt, err_cnt2));
+	if (s->in_progress) {
+		printf("\ttotal %s scrubbed at rate %s/s, time left: %u:%02u:%02u\n",
+			pretty_size(bytes_scrubbed),
+			pretty_size(bytes_per_sec),
+			h_left, m_left, s_left);
+	} else
+		printf("\ttotal %s scrubbed at rate %s/s\n",
+			pretty_size(bytes_scrubbed),
+			pretty_size(bytes_per_sec));
+
 
 	if (err_cnt || err_cnt2) {
 		printf("\terror details:");
@@ -164,7 +177,8 @@ static void print_scrub_summary(struct btrfs_scrub_progress *p)
 		printf("\tcorrected errors: %llu, uncorrectable errors: %llu, "
 			"unverified errors: %llu\n", p->corrected_errors,
 			p->uncorrectable_errors, p->unverified_errors);
-	}
+	} else
+		printf("\tno errors found\n");
 }
 
 #define _SCRUB_FS_STAT(p, name, fs_stat) do {	\
@@ -253,11 +267,11 @@ static void _print_scrub_ss(struct scrub_stats *ss)
 	if (ss->in_progress)
 		printf(", running for %02u:%s\n", hours, t);
 	else if (ss->canceled)
-		printf(" and was aborted after %02u:%s\n", hours, t);
+		printf(" and was aborted after %u:%s\n", hours, t);
 	else if (ss->finished)
-		printf(" and finished after %02u:%s\n", hours, t);
+		printf(" and finished after %u:%s\n", hours, t);
 	else
-		printf(", interrupted after %02u:%s, not running\n",
+		printf(", interrupted after %u:%s, not running\n",
 		       hours, t);
 }
 
@@ -274,18 +288,18 @@ static void print_scrub_dev(struct btrfs_ioctl_dev_info_args *di,
 		if (raw)
 			print_scrub_full(p);
 		else
-			print_scrub_summary(p);
+			print_scrub_summary(p, ss, di->bytes_used);
 	}
 }
 
-static void print_fs_stat(struct scrub_fs_stat *fs_stat, int raw)
+static void print_fs_stat(struct scrub_fs_stat *fs_stat, int raw, u64 bytes)
 {
 	_print_scrub_ss(&fs_stat->s);
 
 	if (raw)
 		print_scrub_full(&fs_stat->p);
 	else
-		print_scrub_summary(&fs_stat->p);
+		print_scrub_summary(&fs_stat->p, &fs_stat->s, bytes);
 }
 
 static void free_history(struct scrub_file_record **last_scrubs)
@@ -1490,6 +1504,7 @@ static int scrub_start(int argc, char **argv, int resume)
 
 	if (do_print) {
 		const char *append = "done";
+		u64 used_bytes = 0;
 		if (!do_stats_per_dev)
 			init_fs_stat(&fs_stat);
 		for (i = 0; i < fi_args.num_devices; ++i) {
@@ -1505,10 +1520,11 @@ static int scrub_start(int argc, char **argv, int resume)
 				add_to_fs_stat(&sp[i].scrub_args.progress,
 						&sp[i].stats, &fs_stat);
 			}
+			used_bytes += di_args[i].bytes_used;
 		}
 		if (!do_stats_per_dev) {
 			printf("scrub %s for %s\n", append, fsid);
-			print_fs_stat(&fs_stat, print_raw);
+			print_fs_stat(&fs_stat, print_raw, used_bytes);
 		}
 	}
 
@@ -1771,6 +1787,7 @@ static int cmd_scrub_status(int argc, char **argv)
 					&last_scrub->stats);
 		}
 	} else {
+		u64 used_bytes = 0;
 		init_fs_stat(&fs_stat);
 		fs_stat.s.in_progress = in_progress;
 		for (i = 0; i < fi_args.num_devices; ++i) {
@@ -1780,8 +1797,9 @@ static int cmd_scrub_status(int argc, char **argv)
 				continue;
 			add_to_fs_stat(&last_scrub->p, &last_scrub->stats,
 					&fs_stat);
+			used_bytes += di_args[i].bytes_used;
 		}
-		print_fs_stat(&fs_stat, print_raw);
+		print_fs_stat(&fs_stat, print_raw, used_bytes);
 	}
 
 out:
