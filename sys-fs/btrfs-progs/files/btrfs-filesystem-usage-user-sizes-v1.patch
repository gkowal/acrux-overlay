diff --git a/cmds-fi-usage.c b/cmds-fi-usage.c
index 66c28e79..4d029bba 100644
--- a/cmds-fi-usage.c
+++ b/cmds-fi-usage.c
@@ -335,8 +335,13 @@ static int print_filesystem_usage_overall(int fd, struct chunk_info *chunkinfo,
 	u64 raid6_used = 0;
 	u64 l_global_reserve = 0;
 	u64 l_global_reserve_used = 0;
+	u64 size_estimated = 0;
+	u64 data_estimated = 0;
+	u64 meta_estimated = 0;
+	u64 used_estimated = 0;
 	u64 free_estimated = 0;
 	u64 free_min = 0;
+	u64 useless = 0;
 	int max_data_ratio = 1;
 	int mixed = 0;
 
@@ -397,20 +402,28 @@ static int print_filesystem_usage_overall(int fd, struct chunk_info *chunkinfo,
 		if ((flags & (BTRFS_BLOCK_GROUP_DATA | BTRFS_BLOCK_GROUP_METADATA))
 		    == (BTRFS_BLOCK_GROUP_DATA | BTRFS_BLOCK_GROUP_METADATA)) {
 			mixed = 1;
+			size_estimated += sargs->spaces[i].total_bytes;
+			data_estimated += sargs->spaces[i].used_bytes;
 		}
 		if (flags & BTRFS_BLOCK_GROUP_DATA) {
 			r_data_used += sargs->spaces[i].used_bytes * ratio;
 			r_data_chunks += sargs->spaces[i].total_bytes * ratio;
 			l_data_chunks += sargs->spaces[i].total_bytes;
+			size_estimated += sargs->spaces[i].total_bytes;
+			data_estimated += sargs->spaces[i].used_bytes;
 		}
 		if (flags & BTRFS_BLOCK_GROUP_METADATA) {
 			r_metadata_used += sargs->spaces[i].used_bytes * ratio;
 			r_metadata_chunks += sargs->spaces[i].total_bytes * ratio;
 			l_metadata_chunks += sargs->spaces[i].total_bytes;
+			size_estimated += sargs->spaces[i].total_bytes;
+			meta_estimated += sargs->spaces[i].total_bytes;
 		}
 		if (flags & BTRFS_BLOCK_GROUP_SYSTEM) {
 			r_system_used += sargs->spaces[i].used_bytes * ratio;
 			r_system_chunks += sargs->spaces[i].total_bytes * ratio;
+			size_estimated += sargs->spaces[i].total_bytes;
+			meta_estimated += sargs->spaces[i].total_bytes;
 		}
 	}
 
@@ -434,6 +447,23 @@ static int print_filesystem_usage_overall(int fd, struct chunk_info *chunkinfo,
 	total_chunks += raid5_used + raid6_used;
 #endif
 
+	/*
+	 * The user available space should be applied by per device and depends
+	 * on the DATA profile. It should also be aligned to 4kiB pages and
+	 * exclude first 1MiB since the fs does not use it.
+	 *
+	 * Update the user total size by the unallocated space excluding
+	 * the part which never will be used.
+	 */
+	size_estimated += (u64)(r_total_unused / data_ratio);
+	useless = size_estimated - ((size_estimated >> 16) << 16) + SZ_1M;
+	size_estimated -= useless;
+
+	/*
+	 * Estimate the used user space
+	 */
+	used_estimated = data_estimated + meta_estimated;
+
 	/*
 	 * We're able to fill at least DATA for the unused space
 	 *
@@ -442,8 +472,9 @@ static int print_filesystem_usage_overall(int fd, struct chunk_info *chunkinfo,
 	 * (l_data_chunks - l_data_used)
 	 *
 	 * In non-mixed case there's no difference.
+	 *
 	 */
-	free_estimated = (r_data_chunks - r_data_used) / data_ratio;
+	free_estimated = (r_data_chunks - r_data_used) / data_ratio - useless;
 	/*
 	 * For mixed-bg the metadata are left out in calculations thus global
 	 * reserve would be lost. Part of it could be permanently allocated,
@@ -472,11 +503,21 @@ static int print_filesystem_usage_overall(int fd, struct chunk_info *chunkinfo,
 		pretty_size_mode(r_total_chunks, unit_mode));
 	printf("    Device unallocated:\t\t%*s\n", width,
 		pretty_size_mode(r_total_unused, unit_mode | UNITS_NEGATIVE));
+	printf("    Device used:\t\t%*s\n", width,
+		pretty_size_mode(r_total_used, unit_mode));
 	printf("    Device missing:\t\t%*s\n", width,
 		pretty_size_mode(r_total_missing, unit_mode));
-	printf("    Used:\t\t\t%*s\n", width,
-		pretty_size_mode(r_total_used, unit_mode));
-	printf("    Free (estimated):\t\t%*s\t(",
+	printf("    User size:\t\t\t%*s\n", width,
+		pretty_size_mode(size_estimated, unit_mode));
+	if (!mixed) {
+		printf("    User data:\t\t\t%*s\n", width,
+			pretty_size_mode(data_estimated, unit_mode));
+		printf("    User metadata:\t\t%*s\n", width,
+			pretty_size_mode(meta_estimated, unit_mode));
+	}
+	printf("    User total:\t\t\t%*s\n", width,
+		pretty_size_mode(used_estimated, unit_mode));
+	printf("    User free (estimated):\t%*s\t(",
 		width,
 		pretty_size_mode(free_estimated, unit_mode));
 	printf("min: %s)\n", pretty_size_mode(free_min, unit_mode));
