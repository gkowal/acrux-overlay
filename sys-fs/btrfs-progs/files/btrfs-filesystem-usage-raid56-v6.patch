diff -uNr btrfs-progs-v4.9.1-r1/cmds-fi-usage.c btrfs-progs-v4.9.1-r2/cmds-fi-usage.c
--- btrfs-progs-v4.9.1-r1/cmds-fi-usage.c	2017-01-27 12:15:59.000000000 -0200
+++ btrfs-progs-v4.9.1-r2/cmds-fi-usage.c	2017-01-28 10:45:40.121218195 -0200
@@ -334,9 +334,13 @@
 	u64 raid6_used = 0;
 	u64 l_global_reserve = 0;
 	u64 l_global_reserve_used = 0;
+	u64 size_estimated = 0;
+	u64 data_estimated = 0;
+	u64 meta_estimated = 1024 * 1024;
+	u64 used_estimated = 0;
 	u64 free_estimated = 0;
 	u64 free_min = 0;
-	int max_data_ratio = 1;
+	u64 unused = 0;
 	int mixed = 0;
 
 	sargs = load_space_info(fd, path);
@@ -362,7 +366,7 @@
 	get_raid56_used(fd, chunkinfo, chunkcount, &raid5_used, &raid6_used);
 
 	for (i = 0; i < sargs->total_spaces; i++) {
-		int ratio;
+		int mul = 1, div = 1, dup = 1;
 		u64 flags = sargs->spaces[i].flags;
 
 		/*
@@ -370,25 +374,25 @@
 		 * used by every chunk. It is computed separately
 		 */
 		if (flags & BTRFS_BLOCK_GROUP_RAID0)
-			ratio = 1;
+			mul = 1;
 		else if (flags & BTRFS_BLOCK_GROUP_RAID1)
-			ratio = 2;
-		else if (flags & BTRFS_BLOCK_GROUP_RAID5)
-			ratio = 0;
-		else if (flags & BTRFS_BLOCK_GROUP_RAID6)
-			ratio = 0;
-		else if (flags & BTRFS_BLOCK_GROUP_DUP)
-			ratio = 2;
+			mul = 2;
+		else if (flags & BTRFS_BLOCK_GROUP_RAID5) {
+			mul = devcount;
+			div = devcount - 1;
+		}
+		else if (flags & BTRFS_BLOCK_GROUP_RAID6) {
+			mul = devcount;
+			div = devcount - 2;
+		}
+		else if (flags & BTRFS_BLOCK_GROUP_DUP) {
+			mul = 2;
+			dup = 2;
+		}
 		else if (flags & BTRFS_BLOCK_GROUP_RAID10)
-			ratio = 2;
+			mul = 2;
 		else
-			ratio = 1;
-
-		if (!ratio)
-			warning("RAID56 detected, not implemented");
-
-		if (ratio > max_data_ratio)
-			max_data_ratio = ratio;
+			mul = 1;
 
 		if (flags & BTRFS_SPACE_INFO_GLOBAL_RSV) {
 			l_global_reserve = sargs->spaces[i].total_bytes;
@@ -399,18 +403,24 @@
 			mixed = 1;
 		}
 		if (flags & BTRFS_BLOCK_GROUP_DATA) {
-			r_data_used += sargs->spaces[i].used_bytes * ratio;
-			r_data_chunks += sargs->spaces[i].total_bytes * ratio;
+			r_data_used += sargs->spaces[i].used_bytes * mul / div;
+			r_data_chunks += sargs->spaces[i].total_bytes * mul / div;
 			l_data_chunks += sargs->spaces[i].total_bytes;
+			size_estimated += sargs->spaces[i].total_bytes * dup;
+			data_estimated += sargs->spaces[i].used_bytes * dup;
 		}
 		if (flags & BTRFS_BLOCK_GROUP_METADATA) {
-			r_metadata_used += sargs->spaces[i].used_bytes * ratio;
-			r_metadata_chunks += sargs->spaces[i].total_bytes * ratio;
+			r_metadata_used += sargs->spaces[i].used_bytes * mul / div;
+			r_metadata_chunks += sargs->spaces[i].total_bytes * mul / div;
 			l_metadata_chunks += sargs->spaces[i].total_bytes;
+			size_estimated += sargs->spaces[i].total_bytes * dup;
+			meta_estimated += sargs->spaces[i].total_bytes * dup;
 		}
 		if (flags & BTRFS_BLOCK_GROUP_SYSTEM) {
-			r_system_used += sargs->spaces[i].used_bytes * ratio;
-			r_system_chunks += sargs->spaces[i].total_bytes * ratio;
+			r_system_used += sargs->spaces[i].used_bytes * mul / div;
+			r_system_chunks += sargs->spaces[i].total_bytes * mul / div;
+			size_estimated += sargs->spaces[i].total_bytes * dup;
+			meta_estimated += sargs->spaces[i].total_bytes * dup;
 		}
 	}
 
@@ -443,7 +453,11 @@
 	 *
 	 * In non-mixed case there's no difference.
 	 */
-	free_estimated = (r_data_chunks - r_data_used) / data_ratio;
+	size_estimated += (u64)(r_total_unused / data_ratio);
+	unused = size_estimated - ((size_estimated >> 16) << 16);
+	size_estimated -= unused;
+	used_estimated = data_estimated + meta_estimated;
+	free_estimated = (r_data_chunks - r_data_used) / data_ratio - 1024 * 1024 - unused;
 	/*
 	 * For mixed-bg the metadata are left out in calculations thus global
 	 * reserve would be lost. Part of it could be permanently allocated,
@@ -458,7 +472,7 @@
 	if (r_total_unused >= MIN_UNALOCATED_THRESH) {
 		free_estimated += r_total_unused / data_ratio;
 		/* Match the calculation of 'df', use the highest raid ratio */
-		free_min += r_total_unused / max_data_ratio;
+		free_min += r_total_unused / max(data_ratio, metadata_ratio);
 	}
 
 	if (unit_mode != UNITS_HUMAN)
@@ -472,11 +486,19 @@
 		pretty_size_mode(r_total_chunks, unit_mode));
 	printf("    Device unallocated:\t\t%*s\n", width,
 		pretty_size_mode(r_total_unused, unit_mode | UNITS_NEGATIVE));
+	printf("    Device used:\t\t%*s\n", width,
+		pretty_size_mode(r_total_used, unit_mode));
 	printf("    Device missing:\t\t%*s\n", width,
 		pretty_size_mode(r_total_missing, unit_mode));
-	printf("    Used:\t\t\t%*s\n", width,
-		pretty_size_mode(r_total_used, unit_mode));
-	printf("    Free (estimated):\t\t%*s\t(",
+	printf("    User size:\t\t\t%*s\n", width,
+		pretty_size_mode(size_estimated, unit_mode));
+	printf("    User used data:\t\t%*s\n", width,
+		pretty_size_mode(data_estimated, unit_mode));
+	printf("    User used metadata:\t\t%*s\n", width,
+		pretty_size_mode(meta_estimated, unit_mode));
+	printf("    User used total:\t\t%*s\n", width,
+		pretty_size_mode(used_estimated, unit_mode));
+	printf("    User free (estimated):\t%*s\t(",
 		width,
 		pretty_size_mode(free_estimated, unit_mode));
 	printf("min: %s)\n", pretty_size_mode(free_min, unit_mode));
