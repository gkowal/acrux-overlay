diff -uNr btrfs-progs-v4.9.1/cmds-fi-usage.c btrfs-progs-v4.9.1-r1/cmds-fi-usage.c
--- btrfs-progs-v4.9.1/cmds-fi-usage.c	2017-02-20 07:19:25.705399458 -0300
+++ btrfs-progs-v4.9.1-r1/cmds-fi-usage.c	2017-02-20 07:20:26.507802993 -0300
@@ -647,6 +647,31 @@
 }
 
 /*
+ *  These functions compute the device used and total sizes of a space
+ */
+static u64 calc_device_size_used(struct btrfs_ioctl_space_info *si)
+{
+	if (si->flags & BTRFS_BLOCK_GROUP_DUP)
+		return si->used_bytes * 2;
+	else if (si->flags & BTRFS_BLOCK_GROUP_RAID1)
+		return si->used_bytes * 2;
+	else if (si->flags & BTRFS_BLOCK_GROUP_RAID10)
+		return si->used_bytes * 2;
+	return si->used_bytes;
+}
+
+static u64 calc_device_size_total(struct btrfs_ioctl_space_info *si)
+{
+	if (si->flags & BTRFS_BLOCK_GROUP_DUP)
+		return si->total_bytes * 2;
+	else if (si->flags & BTRFS_BLOCK_GROUP_RAID1)
+		return si->total_bytes * 2;
+	else if (si->flags & BTRFS_BLOCK_GROUP_RAID10)
+		return si->total_bytes * 2;
+	return si->total_bytes;
+}
+
+/*
  *  This function print the results of the command "btrfs fi usage"
  *  in tabular format
  */
@@ -789,7 +814,7 @@
 
 		table_printf(matrix, col++, vhdr_skip + device_info_count + 1,
 			">%s",
-			pretty_size_mode(sargs->spaces[i].total_bytes, unit_mode));
+			pretty_size_mode(calc_device_size_total(&sargs->spaces[i]), unit_mode));
 	}
 
 	table_printf(matrix, unallocated_col, vhdr_skip + device_info_count + 1,
@@ -803,7 +828,7 @@
 
 		table_printf(matrix, col++, vhdr_skip + device_info_count + 2,
 			">%s",
-			pretty_size_mode(sargs->spaces[i].used_bytes, unit_mode));
+			pretty_size_mode(calc_device_size_used(&sargs->spaces[i]), unit_mode));
 	}
 
 	table_dump(matrix);
@@ -896,10 +921,10 @@
 		printf("%s,%s: Size:%s, ",
 			description,
 			r_mode,
-			pretty_size_mode(sargs->spaces[i].total_bytes,
+			pretty_size_mode(calc_device_size_total(&sargs->spaces[i]),
 				unit_mode));
 		printf("Used:%s\n",
-			pretty_size_mode(sargs->spaces[i].used_bytes, unit_mode));
+			pretty_size_mode(calc_device_size_used(&sargs->spaces[i]), unit_mode));
 		print_chunk_device(flags, info_ptr, info_count,
 				device_info_ptr, device_info_count, unit_mode);
 		printf("\n");
