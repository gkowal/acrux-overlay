diff --git a/cmds/filesystem-usage.c b/cmds/filesystem-usage.c
index 36ad4747..204d601b 100644
--- a/cmds/filesystem-usage.c
+++ b/cmds/filesystem-usage.c
@@ -282,28 +282,6 @@ static struct btrfs_ioctl_space_args *load_space_info(int fd, const char *path)
 	return sargs;
 }
 
-/*
- * This function computes the space occupied by a *single* RAID5/RAID6 chunk.
- * The computation is performed on the basis of the number of stripes
- * which compose the chunk, which could be different from the number of devices
- * if a disk is added later.
- */
-static void get_raid56_used(struct chunk_info *chunks, int chunkcount,
-		u64 *raid5_used, u64 *raid6_used)
-{
-	struct chunk_info *info_ptr = chunks;
-	*raid5_used = 0;
-	*raid6_used = 0;
-
-	while (chunkcount-- > 0) {
-		if (info_ptr->type & BTRFS_BLOCK_GROUP_RAID5)
-			(*raid5_used) += info_ptr->size / (info_ptr->num_stripes - 1);
-		if (info_ptr->type & BTRFS_BLOCK_GROUP_RAID6)
-			(*raid6_used) += info_ptr->size / (info_ptr->num_stripes - 2);
-		info_ptr++;
-	}
-}
-
 #define	MIN_UNALOCATED_THRESH	SZ_16M
 static int print_filesystem_usage_overall(int fd, struct chunk_info *chunkinfo,
 		int chunkcount, struct device_info *devinfo, int devcount,
@@ -333,8 +311,6 @@ static int print_filesystem_usage_overall(int fd, struct chunk_info *chunkinfo,
 	double data_ratio;
 	double metadata_ratio;
 	/* logical */
-	u64 raid5_used = 0;
-	u64 raid6_used = 0;
 	u64 l_global_reserve = 0;
 	u64 l_global_reserve_used = 0;
 	u64 free_estimated = 0;
@@ -369,11 +345,11 @@ static int print_filesystem_usage_overall(int fd, struct chunk_info *chunkinfo,
 		ret = 1;
 		goto exit;
 	}
-	get_raid56_used(chunkinfo, chunkcount, &raid5_used, &raid6_used);
 
 	for (i = 0; i < sargs->total_spaces; i++) {
 		int ratio;
 		int dup = 1;
+		int div = 1;
 		u64 flags = sargs->spaces[i].flags;
 		int index = btrfs_bg_flags_to_raid_index(flags);
 
@@ -385,11 +361,13 @@ static int print_filesystem_usage_overall(int fd, struct chunk_info *chunkinfo,
 			ratio = 1;
 		else if (flags & BTRFS_BLOCK_GROUP_RAID1)
 			ratio = 2;
-		else if (flags & BTRFS_BLOCK_GROUP_RAID5)
-			ratio = 0;
-		else if (flags & BTRFS_BLOCK_GROUP_RAID6)
-			ratio = 0;
-		else if (flags & BTRFS_BLOCK_GROUP_DUP) {
+		else if (flags & BTRFS_BLOCK_GROUP_RAID5) {
+			ratio = chunkinfo->num_stripes;
+			div   = chunkinfo->num_stripes - 1;
+		} else if (flags & BTRFS_BLOCK_GROUP_RAID6) {
+			ratio = chunkinfo->num_stripes;
+			div   = chunkinfo->num_stripes - 2;
+		} else if (flags & BTRFS_BLOCK_GROUP_DUP) {
 			ratio = 2;
 			dup = 2;
 		}
@@ -398,9 +376,6 @@ static int print_filesystem_usage_overall(int fd, struct chunk_info *chunkinfo,
 		else
 			ratio = 1;
 
-		if (!ratio)
-			warning("RAID56 detected, not implemented");
-
 		if (ratio > max_data_ratio)
 			max_data_ratio = ratio;
 
@@ -420,20 +395,20 @@ static int print_filesystem_usage_overall(int fd, struct chunk_info *chunkinfo,
 			mixed = 1;
 		}
 		if (flags & BTRFS_BLOCK_GROUP_DATA) {
-			r_data_used += sargs->spaces[i].used_bytes * ratio;
-			r_data_chunks += sargs->spaces[i].total_bytes * ratio;
+			r_data_used += sargs->spaces[i].used_bytes * ratio / div;
+			r_data_chunks += sargs->spaces[i].total_bytes * ratio / div;
 			l_data_chunks += sargs->spaces[i].total_bytes;
 			user_data_used[index] += sargs->spaces[i].used_bytes * dup;
 		}
 		if (flags & BTRFS_BLOCK_GROUP_METADATA) {
-			r_metadata_used += sargs->spaces[i].used_bytes * ratio;
-			r_metadata_chunks += sargs->spaces[i].total_bytes * ratio;
+			r_metadata_used += sargs->spaces[i].used_bytes * ratio / div;
+			r_metadata_chunks += sargs->spaces[i].total_bytes * ratio / div;
 			l_metadata_chunks += sargs->spaces[i].total_bytes;
 			user_meta_used[index] += sargs->spaces[i].total_bytes * dup;
 		}
 		if (flags & BTRFS_BLOCK_GROUP_SYSTEM) {
-			r_system_used += sargs->spaces[i].used_bytes * ratio;
-			r_system_chunks += sargs->spaces[i].total_bytes * ratio;
+			r_system_used += sargs->spaces[i].used_bytes * ratio / div;
+			r_system_chunks += sargs->spaces[i].total_bytes * ratio / div;
 			user_system_used[index] += sargs->spaces[i].total_bytes * dup;
 		}
 	}
@@ -453,11 +428,6 @@ static int print_filesystem_usage_overall(int fd, struct chunk_info *chunkinfo,
 	else
 		metadata_ratio = (double)r_metadata_chunks / l_metadata_chunks;
 
-#if 0
-	/* add the raid5/6 allocated space */
-	total_chunks += raid5_used + raid6_used;
-#endif
-
 	/*
 	 * We're able to fill at least DATA for the unused space
 	 *
